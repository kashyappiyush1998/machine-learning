import cv2
import numpy as np
import os
def collect_dataset():
    images = []
    labels = []
    labels_dic = {}
   
    people = [person for person in os.listdir("/home/piyush/data/")]
   
    for i, person in enumerate(people):
        labels_dic[i] = person
        for image in os.listdir("/home/piyush/data/" + person)[:1000]:
            if image.endswith('.png'):
                images.append(cv2.imread("/home/piyush/data/" + person + '/' + image, 0))
                labels.append(i)
    return (images, np.array(labels), labels_dic)
images, labels, labels_dic = collect_dataset()
train_data = np.asarray(images)
import matplotlib.pyplot as plt
plt.imshow(train_data[0],cmap='gray')
plt.show()
train_data = train_data.reshape(len(train_data),-1)
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train_sc = sc.fit_transform(train_data.astype(np.float64))
pca1 = PCA(n_components=.97)
new_train=pca1.fit_transform(X_train_sc)
from sklearn.linear_model import LogisticRegression
#from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV,KFold
param = {'C':[.001,.01,.1,1,10],'penalty':['l2','l1']}
gd = GridSearchCV(LogisticRegression(),param_grid=param,cv=10,scoring='accuracy')
gd.fit(new_train,labels)
t = cv2.imread('test_Bush.jpg')
t1 = cv2.cvtColor(t,cv2.COLOR_BGR2GRAy)

def detect_face(frame):
   
        
    detector = cv2.CascadeClassifier("xml/frontal_face.xml")

    faces = detector.detectMultiScale(frame,1.2,5)
    
    return faces
face = detect_face(t1)
x,y,w,h = face[0]
f = t1[y:y+h,x:x+w]
f = cv2.resize(f,(64,64))
plt.imshow(f,cmap='gray')
plt.show()
f = sc.transform(f.astype(np.float64).reshape(1,-1))
f = pca.transform(f)
pre = gd.predict(f)
from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(500,500,500),max_iter=500,alpha=1e-4,
                    learning_rate_init=.001,solver='sgd',
                    random_state=1
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(train_data,labels,test_size=.2,
                                                random_state=10,shuffle=True)
sc = StandardScaler()
X_train_sc = sc.fit_transform(X_train.astype(np.float64))
X_test_Sc = sc.transform(X_test.astype(np.float64))

pca1 = PCA(n_components=.97)
X_train_pca=pca1.fit_transform(X_train_sc)
X_test_pca=pca1.transform(X_test_Sc)

pred = mlp.predict(X_test_pca)

from sklearn.metrics import accuracy_score

def gray_scale(image):
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return image
    
cam = cv2.VideoCapture(0)
font=cv2.FONT_HERSHEY_PLAIN
cv2.namedWindow("opencv_face", cv2.WINDOW_AUTOSIZE)



while True:
    ret,frame = cam.read()
    
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    faces_coord = detect_face(gray) # detect more than one face
    if len(faces_coord):
        #faces = normalize_faces(frame, faces_coord)
        #faces = normalize_intensity(faces)
        for i, face in enumerate(faces_coord): # for each detected face
            x,y,w,h=face
            t=gray[y: y + h, x : x + w ]
            t = cv2.resize(t,(64,64))
            #cv2.imwrite('trainingData/female/picture_BGR5.jpg',face)
            t=face.reshape(1,-1)
            t=sc.transform(t.astype(np.float64))
            test = pca1.transform(t)    
            #print test
            #transform = test.reshape(1,-1)
            #print transform
            prob=mlp.predict_proba(test)
            #confidence = svc1.decision_function(test)
            #print (confidence)
            print (prob)
           
            
            
            pred = mlp.predict(test)
            print (pred,pred[0])
           
            name=labels_dic[pred[0]].capitalize()
            print (name)
            
            
           
            if prob[0][1]>.85:
                
                cv2.putText(frame, 'male',(faces_coord[i][0], faces_coord[i][1] - 10),
                            cv2.FONT_HERSHEY_PLAIN, 2, (66, 53, 243), 2)
            
                
           
                
            elif prob[0][0]>.8:
                cv2.putText(frame,'female',(faces_coord[i][0], faces_coord[i][1] - 10),
                            cv2.FONT_HERSHEY_PLAIN, 3, (66, 53, 243), 2)
                
        clear_output(wait = True)
        draw_rectangle(frame, faces_coord) # rectangle around face
        
    cv2.putText(frame, "ESC to exit", (5, frame.shape[0] - 5),cv2.FONT_HERSHEY_PLAIN, 1.3, (66, 53, 243), 2,cv2.LINE_AA)
    
    cv2.imshow("opencv_face", frame) # live feed in external
    if cv2.waitKey(5) == 27:
        break
        
cam.release()
cv2.destroyAllWindows()
        
